name: "Terraform"

on:
  push:
    branches:
      - 'TerraformDev'
      - 'TerraformStage'
      - 'master'



jobs:
  service_user_deployment_dev:
    if: github.ref == 'refs/heads/TerraformDev'
    name: "DEV - Service User Deployment"
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    defaults:
      run:
        working-directory: ${{ github.workspace }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: 'refs/heads/TerraformDev'

      - id: tool-versions
        name: Set tool versions
        run: |
          printf '::set-output name=terraform::%s\n' "$(<.terraform-version)"

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2.0.0
        with:
          terraform_version: "${{ steps.tool-versions.outputs.terraform }}"
          terraform_wrapper: false

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          role-to-assume: ${{ secrets.DEV_ROLE_ARN }}
          aws-region: ap-southeast-1

      - name: Terraform Init
        id: init
        run: |
          cd service-users
          terraform init -backend-config="bucket=do-not-delete-data-terraform-state-backend" -backend-config="dynamodb_table=data_terraform_state" -reconfigure

      - name: Terraform Validate
        id: validate
        run: |
          cd service-users
          terraform validate -no-color

      - name: Terraform Plan and Apply
        id: terraform-plan-apply
        run: |
          cd service-users
          terraform plan -var-file terraform_dev.tfvars -out terraform.out
          terraform apply "terraform.out"

  service_user_deployment_stage:
    if: github.ref == 'refs/heads/TerraformStage'
    name: "STAGE - Service User Deployment"
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    defaults:
      run:
        working-directory: ${{ github.workspace }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: 'refs/heads/TerraformStage'

      - id: tool-versions
        name: Set tool versions
        run: |
          printf '::set-output name=terraform::%s\n' "$(<.terraform-version)"

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2.0.0
        with:
          terraform_version: "${{ steps.tool-versions.outputs.terraform }}"
          terraform_wrapper: false

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          role-to-assume: ${{ secrets.STAGE_ROLE_ARN }}
          aws-region: ap-southeast-1

      - name: Terraform Init
        id: init
        run: |
          cd service-users
          terraform init -backend-config="bucket=do-not-delete-data-terraform-state-backend-stage" -backend-config="dynamodb_table=data_terraform_state-stage" -reconfigure

      - name: Terraform Validate
        id: validate
        run: |
          cd service-users
          terraform validate -no-color

      - name: Terraform Plan and Apply
        id: terraform-plan-apply
        run: |
          cd service-users
          terraform plan -var-file terraform_stage.tfvars -out terraform.out
          terraform apply "terraform.out" 
        
  service_user_deployment_prod:
    if: github.ref == 'refs/heads/master'
    name: "PROD - Service User Deployment"
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    defaults:
      run:
        working-directory: ${{ github.workspace }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: 'refs/heads/master'

      - id: tool-versions
        name: Set tool versions
        run: |
          printf '::set-output name=terraform::%s\n' "$(<.terraform-version)"

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2.0.0
        with:
          terraform_version: "${{ steps.tool-versions.outputs.terraform }}"
          terraform_wrapper: false

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          role-to-assume: ${{ secrets.PROD_ROLE_ARN }}
          aws-region: ap-southeast-1

      - name: Terraform Init
        id: init
        run: |
          cd service-users
          terraform init -backend-config="bucket=do-not-delete-data-terraform-state-backend-prod" -backend-config="dynamodb_table=data_terraform_state-prod" -reconfigure

      - name: Terraform Validate
        id: validate
        run: |
          cd service-users
          terraform validate -no-color

      - name: Terraform Plan and Apply
        id: terraform-plan-apply
        run: |
          cd service-users
          terraform plan -var-file terraform_prod.tfvars -out terraform.out
          terraform apply "terraform.out"
          
      